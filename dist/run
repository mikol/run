#!/usr/bin/env node

// run v0.1.0 (2018-03-05T18:34:46.150Z)
// https://github.com/mikol/run
// http://creativecommons.org/licenses/by-sa/4.0/

const version = 'v0.1.0'

'use strict';

var ArgvParser = require('./lib/argv-parser');
var Runner = require('./lib/runner');

function usage(code, message) {
  var log = console[code ? 'error' : 'log'];

  if (message) {
    log(message);
  }

  log('Usage: run [--version] [-h | --help] [-q | --quiet | -s | --silent] <command> [-- <args>...]');

  process.exit(code);
}

var argv = new ArgvParser(process.argv.slice(2), {
  aliases: {
    'help': 'h',
    'quiet': ['q', 's', 'silent']
  },
  defaults: {
    help: false,
    quiet: false
  },
  validate: function validate(key, value) {
    if (!this.aliases[key] && key !== 'version') {
      usage(1, 'Unknown option: ' + key);
    }

    return true;
  }
}).parse();

if (argv.help) {
  usage();
}

var runner = new Runner({
  scriptName: argv[''][0],
  unscannedArguments: argv['--']
});

if (argv.version) {
  console.log(runner.appName + ' ' + (typeof version !== 'undefined' ? version : 'v0.0.0'));
  process.exit();
}

runner.on('error', function (error) {
  console.error(error);
  process.exit(1);
});

runner.on('exit', function (code) {
  if (code && !argv.quiet) {
    console.error('Exit status ' + code);
  }

  process.exit(code);
});

runner.on('list', function (scripts) {
  console.log(runner.appName + ': ' + runner.moduleRoot + ' scripts:');
  Object.keys(scripts).forEach(function (name) {
    return console.log('  ' + name + ':\n    ' + scripts[name]);
  });
  process.exit();
});

runner.on('run', function (spec) {
  if (!argv.quiet) {
    console.log();
    console.log('> ' + spec.name + (spec.version ? '@' + spec.version : '') + ' ' + spec.wd);
    console.log('> ' + spec.script);
    console.log();
  }
});

runner.run();
